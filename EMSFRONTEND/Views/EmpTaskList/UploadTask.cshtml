
@using EMSFRONTEND.Models;
@model Tuple<IEnumerable<TaskModel>, UploadModel>;

@{
    ViewData["Title"] = "Task List";
}



@if (!ViewData.ModelState.IsValid)
{
        <div class="alert alert-danger">
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
                    <p>@error.ErrorMessage</p>
        }
        </div>
}



<h2 class="text-center my-4">Assigned Tasks</h2>

<table class="table table-striped table-bordered table-hover shadow-sm rounded">
    <thead class="thead-light">
        <tr>
            <th>Task Id</th>
            <th>Task Title</th>
            <th>Description</th>
            <th>Assigned Date</th>
            <th>Deadline Date</th>
            <th>Resources</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in Model.Item1)
        {
                <tr>
                    <td>@task.TaskId</td>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.AssignedDate.ToString("MMMM dd, yyyy")</td>
                    <td>@task.DeadlineDate.ToString("MMMM dd, yyyy")</td>
                    <td>
                    @if (!string.IsNullOrEmpty(task.Resources))
                    {
                        var resourcePath = task.Resources;
                        // Ensure the link starts with http:// or https://
                        if (!resourcePath.StartsWith("http://") && !resourcePath.StartsWith("https://"))
                        {
                            resourcePath = "https://" + resourcePath; // Prepend https:// to ensure proper linking
                        }
                                <a href="@resourcePath" target="_blank" class="text-primary">View Resource</a>
                    }
                    </td>

                    <td>
                    @{
                        string statusColor = task.TaskStatus switch
                        {
                            "Pending" => "text-primary bg-light", // Blue for Pending
                            "Submitted" => "text-success bg-light", // Green for Submitted
                            "Overdue" => "text-danger bg-light", // Red for Overdue
                            _ => ""
                        };
                    }
                        <span class="@statusColor"
                              style="border-radius: 10px; padding: 5px 10px; font-weight: bold;">
                        @task.TaskStatus
                        </span>
                    </td>
                </tr>
        }
    </tbody>
</table>

<!-- Add space between the table and the form -->
<div class="mt-5"></div>

<h2 class="text-center mb-4">Upload Task File</h2>

<!-- Form to  enter TaskId and FilePath -->
<form asp-action="UploadTask" method="post" class="shadow p-4 mb-5 bg-white rounded">
    <div class="form-group">
        <label for="TaskId" class="font-weight-bold">Task ID</label>
        <input type="number" id="TaskId" name="TaskId" class="form-control" value="@Model.Item2.TaskId" required />
    </div>

    <div class="form-group">
        <label for="FilePath" class="font-weight-bold">File Path</label>
        <input type="text" id="FilePath" name="FilePath" class="form-control" value="@Model.Item2.FilePath" required />
    </div>

    <!-- Button to assign the task -->
    <button type="submit" class="btn btn-primary w-100 py-3"
            style="border-radius: 10px;
           background: linear-gradient(135deg, #007bff, #0056b3);
           transition: background 0.3s ease;">
        Submit
    </button>

    <!-- Back button -->
    <div class="mt-3">
<a href="@Url.Action("EmployeeView", "Dashboard")" class="btn btn-outline-primary">Back to Dashboard</a>
</div>
</form>

<!-- Custom CSS for styling -->
<style>
    table {
        width: 100%; 
        border-collapse: collapse; 
        margin-top: 20px; 
    }

    th, td {
        padding: 15px; 
        text-align: center; 
        vertical-align: middle; 
        border-radius: 5px; 
    }

    th {
        background-color: #f8f9fa; 
        color: #333; 
        font-weight: bold; 
    }

    td {
        background-color: #ffffff; 
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); 
    }

    tbody tr:hover {
        background-color: #f1f1f1; 
    }

    tbody tr:nth-child(even) {
        background-color: #f9f9f9; 
    }

    /* Styling for the form */
    form {
        max-width: 600px; 
        margin: 0 auto; 
    }

    .form-group label {
        font-size: 16px;
    }

    .form-control {
        padding: 10px; 
        font-size: 14px; 
        border-radius: 5px; 
        border: 1px solid #ced4da; 
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #0056b3, #003f7f); /* Darker gradient on hover */
    }

    .btn-outline-primary:hover {
        background-color: #007bff; 
        color: white; 
    }
</style>

        <script>
    document.getElementById('backButton').addEventListener('click', function () {
        window.history.back(); // Go back 
    });
</script>